package org.rongubombu.db;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.TimerTask;

import org.rongubombu.elasticsearch.ELSearchConnectionUtil;

public class EsTimer extends TimerTask{

	@Override
	public void run() {
		updateEs("INSERT");
		updateEs("UPDATE");
		deleteBooksTrigger();
	}
	
	private void updateEs(String action){
		if (null!=action) {
			Connection conn = null;
			ResultSet rs = null;
			PreparedStatement ps = null;
			ResultSet rs1 = null;
			PreparedStatement ps1 = null;
			try {
				conn = DBConnectionUtil.getConection();
				String sql="";
				if("INSERT".equals(action)){
					sql = "SELECT BOOK_ID FROM BOOKS_TRIGGER WHERE ACTION='INSERT'";
				}
				else if("UPDATE".equals(action)){
					sql = "SELECT BOOK_ID FROM BOOKS_TRIGGER WHERE ACTION='UPDATE'";
				}
				ps = conn.prepareStatement(sql);
				rs = ps.executeQuery();
				while (rs.next()) {
					try {
						ps1 = conn
								.prepareStatement("SELECT BOOK_ID,BOOK_NAME,AUTHOR_NAME,PUBLISHER,DESCRIPTION,URL FROM BOOKS WHERE BOOK_ID=?");
						ps1.setInt(1, rs.getInt("BOOK_ID"));
						rs1 = ps1.executeQuery();
						while (rs1.next()) {
							Book book = new Book();
							book.setBookId(rs1.getString("BOOK_ID"));
							book.setBookName(rs1.getString("BOOK_NAME"));
							book.setAuthorName(rs1.getString("AUTHOR_NAME"));
							book.setPublisherName(rs1.getString("PUBLISHER"));
							book.setDescription(rs1.getString("DESCRIPTION"));
							book.setUrl(rs1.getString("URL"));
							if("INSERT".equals(action)){
								ELSearchConnectionUtil.addDocument(book);
							}
							else if("UPDATE".equals(action)){
							//	ELSearchConnectionUtil.updateDocument();
							}
						}
					} catch (SQLException e) {
						e.printStackTrace();
					} catch (Exception e) {
						e.printStackTrace();
					}
				}
			} catch (SQLException e) {
				e.printStackTrace();
			} finally {
				DBConnectionUtil.close(ps, rs);
				DBConnectionUtil.closeConection(conn);
			}
		}
	}

	
	private void deleteBooksTrigger(){
		PreparedStatement ps = null;
		Connection conn=null;
		try {
			conn = DBConnectionUtil.getConection();
			ps = conn.prepareStatement("TRUNCATE BOOKS_TRIGGER");
			ps.executeUpdate();
		}
		catch(Exception e){
			e.printStackTrace();
		}finally {
			DBConnectionUtil.close(ps, null);
			DBConnectionUtil.closeConection(conn);
		}
		

	}
	
			

}
