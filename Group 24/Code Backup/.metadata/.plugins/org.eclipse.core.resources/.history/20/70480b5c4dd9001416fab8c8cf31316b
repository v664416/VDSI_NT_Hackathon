package org.rongubombu.db;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

import org.rongubombu.elasticsearch.ELSearchConnectionUtil;

public class DataHelper {

	private static final DataHelper instance = new DataHelper();
	private static final int COUNT=1000;
	
	public DataHelper()
	{
		readDBAndUpdateElasticSearch();
	}
	
	public static DataHelper getInstance() {
		return instance;
	}
	
	public void readDBAndUpdateElasticSearch(){
		int count=getCount();
		int startIndex=0;
		int lastIndex=COUNT;
		try{
			List<Processor> processors = new ArrayList<Processor>();
			if(count>0)
			{
				while(lastIndex<=count)
				{
					Processor processor =  new Processor(startIndex, lastIndex);
					Thread t = new Thread();
					
					processors.add(new Processor(startIndex, lastIndex));
					startIndex=lastIndex+1;
					lastIndex=lastIndex+COUNT;
				}
			}
		}
		catch(Exception e){
			e.printStackTrace();
		}
		
	}

	private int getCount() {
		Connection conn=null;
		ResultSet rs = null;
		PreparedStatement ps = null;
		try {
			conn=DBConnectionUtil.getConection();
			String sql="SELECT COUNT(1) FROM BOOKS";
			ps=conn.prepareStatement(sql);
			rs= ps.executeQuery();
			if(rs.next())
			{
				return rs.getInt("COUNT");
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}
		finally{
			DBConnectionUtil.close(ps, rs);
			DBConnectionUtil.closeConection(conn);
		}
		return 0;
	}
	
}
