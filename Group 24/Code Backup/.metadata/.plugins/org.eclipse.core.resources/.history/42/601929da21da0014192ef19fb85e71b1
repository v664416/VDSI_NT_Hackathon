package org.rongubombu.db;

import java.io.IOException;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.util.ArrayList;
import java.util.List;

import javax.servlet.ServletException;

import org.rongubombu.db.Book;
import org.rongubombu.db.CatalogProcessor;
import org.rongubombu.db.DBConnectionUtil;
import org.rongubombu.db.DbUpdateProcessor;



public class DbUpdater{

	private static final int incr_var = 5000;

	public void process() throws ServletException, IOException {
		List<Book> books = CatalogProcessor.getInstance().processCatalog();
		if (null != books && !books.isEmpty()) {
		int count=books.size();
		int startIndex = 0;
		int lastIndex = incr_var;
		if(count<incr_var)
		{
			lastIndex = count;
		}
		int nbrItr = (count / incr_var);
		if((count%incr_var)>0)
		{
			++nbrItr;
		}
		try
		{
			List<DbUpdateProcessor> processors = new ArrayList<DbUpdateProcessor>();
			for (int i = 0; i<nbrItr; i++)
			{
				;
				processors.add(new DbUpdateProcessor(books.subList(startIndex, lastIndex)));
				startIndex = lastIndex + 1;
				lastIndex = lastIndex + incr_var;
			}
			CallableExecutor.getInstance().process(processors);
		} catch (Exception e) {
			e.printStackTrace();
		}
		
			
			
		
		deleteBooksTrigger();
		}
	}
	
	private void deleteBooksTrigger(){
		PreparedStatement ps = null;
		Connection conn=null;
		try {
			conn = DBConnectionUtil.getConection();
			ps = conn.prepareStatement("TRUNCATE BOOKS_TRIGGER");
			ps.executeUpdate();
		}
		catch(Exception e){
			e.printStackTrace();
		}finally {
			DBConnectionUtil.close(ps, null);
			DBConnectionUtil.closeConection(conn);
		}
		

	}

}
