package org.rongubombu.db;

import java.io.IOException;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

import javax.servlet.*;

import org.rongubombu.elasticsearch.ELSearchConnectionUtil;

public class DataHelper implements Servlet {

	private static final DataHelper instance = new DataHelper();
	private static final int incr_var = 1000;

	public DataHelper() {
		readDBAndUpdateElasticSearch();
	}

	public void readDBAndUpdateElasticSearch() {
		int count = getCount();
		int startIndex = 0;
		int lastIndex = incr_var;
		if(count<incr_var)
		{
			lastIndex = count;
		}
		int nbrItr = count / incr_var;
		try 
		{
			List<Processor> processors = new ArrayList<Processor>();
			for (int i = 1; i <nbrItr; i++)
			{
				processors.add(new Processor(startIndex, lastIndex));
				startIndex = lastIndex + 1;
				lastIndex = lastIndex + incr_var;
			}
			CallableExecutor.getInstance().process(processors);
		} catch (Exception e) {
			e.printStackTrace();
		}
		/*
		 * try{ List<Processor> processors = new ArrayList<Processor>();
		 * if(count>0) { if(count<lastIndex) { lastIndex= count; }
		 * while(lastIndex<=count) { processors.add(new Processor(startIndex,
		 * lastIndex)); startIndex=lastIndex+1; lastIndex=lastIndex+incr_var; }
		 * } CallableExecutor.getInstance().process(processors); }
		 * catch(Exception e){ e.printStackTrace(); }
		 */

	}

	private int getCount() {
		Connection conn = null;
		ResultSet rs = null;
		PreparedStatement ps = null;
		try {
			conn = DBConnectionUtil.getConection();
			String sql = "SELECT COUNT(1) AS COUNT FROM BOOKS";
			ps = conn.prepareStatement(sql);
			rs = ps.executeQuery();
			if (rs.next()) {
				return rs.getInt("COUNT");
			}
		} catch (SQLException e) {
			e.printStackTrace();
		} finally {
			DBConnectionUtil.close(ps, rs);
			DBConnectionUtil.closeConection(conn);
		}
		return 0;
	}

	@Override
	public void destroy() {
		// TODO Auto-generated method stub

	}

	@Override
	public ServletConfig getServletConfig() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public String getServletInfo() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public void init(ServletConfig arg0) throws ServletException {
		readDBAndUpdateElasticSearch();
	}

	@Override
	public void service(ServletRequest arg0, ServletResponse arg1)
			throws ServletException, IOException {
		// TODO Auto-generated method stub

	}

}
